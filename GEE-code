// Define the Sentinel-1 collection
var sentinel1Collection = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filter(ee.Filter.eq('instrumentMode', 'IW'))
  .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))
  .select('VV');

// Function to get the mean and standard deviation images for a specified period including a given date
function getMeanAndStdDevImages(collection, date, period, aoi) {
  var endDate = ee.Date(date);
  var startDate = endDate.advance(-period, 'month');
  var images = collection.filterBounds(aoi)
                         .filterDate(startDate, endDate.advance(1, 'day')) // Include the selected date
                         .select('VV');
  var meanImage = images.mean().clip(aoi);
  var stdDevImage = images.reduce(ee.Reducer.stdDev()).clip(aoi);
  var imageDates = images.aggregate_array('system:time_start').map(function(d) {
    return ee.Date(d).format('YYYY-MM-dd');
  });
  return {mean: meanImage, stdDev: stdDevImage, count: images.size(), dates: imageDates};
}

// Function to get the closest image to a specified date
function getClosestImage(collection, date, aoi) {
  var targetDate = ee.Date(date);
  var images = collection.filterBounds(aoi)
                         .filterDate(targetDate.advance(-15, 'day'), targetDate.advance(15, 'day'))
                         .sort('system:time_start');
  var closestImage = ee.Image(images.first()).clip(aoi);
  return closestImage;
}

// Function to set Google Maps satellite layer as the base map
function setGoogleMapsBaseLayer() {
  Map.setOptions('SATELLITE');
}

// Function to calculate t-scores and adjust for statistical significance
function calculateTScores(meanBefore, stdDevBefore, meanAfter, detectionType, threshold) {
  var tScores = meanAfter.subtract(meanBefore).divide(stdDevBefore);
  
  if (detectionType === 'construction') {
    tScores = tScores.subtract(threshold); // Positive t-scores for construction
  } else {
    tScores = tScores.abs().subtract(threshold); // General change detection
  }

  return tScores;
}

// Function to add a legend to the map
function addLegend() {
  var legend = ui.Panel({
    style: {position: 'bottom-left'}
  });

  var legendTitle = ui.Label({
    value: 'Legend',
    style: {fontWeight: 'bold', fontSize: '16px', margin: '0 0 4px 0'}
  });
  legend.add(legendTitle);

  var makeRow = function(color, name) {
    var colorBox = ui.Label({
      style: {
        backgroundColor: '#' + color,
        padding: '8px',
        margin: '0 0 4px 0'
      }
    });
    var description = ui.Label({
      value: name,
      style: {margin: '0 0 4px 6px'}
    });
    return ui.Panel({
      widgets: [colorBox, description],
      layout: ui.Panel.Layout.Flow('horizontal')
    });
  };

  var lowChange = makeRow('0000FF', 'Low change');
  var mediumChange = makeRow('00FF00', 'Medium change');
  var highChange = makeRow('FFFF00', 'High change');
  var veryHighChange = makeRow('FFA500', 'Very high change');
  var extremeChange = makeRow('FF0000', 'Extreme change');

  legend.add(lowChange);
  legend.add(mediumChange);
  legend.add(highChange);
  legend.add(veryHighChange);
  legend.add(extremeChange);

  Map.add(legend);
}

// Function to evaluate the threshold
function evaluateThreshold(tScores, threshold, logBox) {
  var stats = tScores.reduceRegion({
    reducer: ee.Reducer.percentile([90, 95, 99]),
    geometry: userAOI,
    scale: 10,
    maxPixels: 1e9
  });
  
  stats.evaluate(function(result) {
    var p90 = result.VV_p90;
    var p95 = result.VV_p95;
    var p99 = result.VV_p99;

    logBox.add(ui.Label('90th Percentile of t-scores: ' + p90));
    logBox.add(ui.Label('95th Percentile of t-scores: ' + p95));
    logBox.add(ui.Label('99th Percentile of t-scores: ' + p99));
    
    var message;
    if (threshold > p99) {
      message = 'The current threshold of ' + threshold + ' is too high. Consider lowering it to around ' + p95 + ' or ' + p99 + ' for more sensitivity.';
    } else if (threshold < p90) {
      message = 'The current threshold of ' + threshold + ' is too low. Consider raising it to around ' + p90 + ' or ' + p95 + ' for better specificity.';
    } else {
      message = 'The current threshold of ' + threshold + ' is within a reasonable range.';
    }
    logBox.add(ui.Label(message));
  });
}

// Function to run the multi-image analysis
function runAnalysis(beforeDate, afterDate) {
  var aoi = userAOI;

  // Get the mean and standard deviation images for the period before the start date
  var meanAndStdDevBefore = getMeanAndStdDevImages(sentinel1Collection, beforeDate, 3, aoi);
  var meanImageBefore = meanAndStdDevBefore.mean;
  var stdDevImageBefore = meanAndStdDevBefore.stdDev;
  var countBefore = meanAndStdDevBefore.count;
  var datesBefore = meanAndStdDevBefore.dates;

  // Get the mean and standard deviation images for the period before the end date
  var meanAndStdDevAfter = getMeanAndStdDevImages(sentinel1Collection, afterDate, 3, aoi);
  var meanImageAfter = meanAndStdDevAfter.mean;
  var countAfter = meanAndStdDevAfter.count;
  var datesAfter = meanAndStdDevAfter.dates;

  // Calculate the t-scores
  var tScores = calculateTScores(meanImageBefore, stdDevImageBefore, meanImageAfter, detectionType, threshold);

  // Calculate the mean, max, min, and percentiles of the t-scores
  var stats = tScores.reduceRegion({
    reducer: ee.Reducer.mean().combine({
      reducer2: ee.Reducer.minMax(),
      sharedInputs: true
    }),
    geometry: aoi,
    scale: 10,
    maxPixels: 1e9
  });

  var percentiles = tScores.reduceRegion({
    reducer: ee.Reducer.percentile([90]),
    geometry: aoi,
    scale: 10,
    maxPixels: 1e9
  });

  stats.evaluate(function(result) {
    meanLabel.setValue('Mean of the t-scores: ' + result.VV_mean);
    maxLabel.setValue('Max t-score: ' + result.VV_max);
    minLabel.setValue('Min t-score: ' + result.VV_min);
  });

  percentiles.evaluate(function(result) {
    var t90 = result.VV_p90;

    // Display the number of images and their dates
    beforeImagesLabel.setValue('Images used for before period: ' + countBefore.getInfo());
    afterImagesLabel.setValue('Images used for after period: ' + countAfter.getInfo());

    datesBefore.evaluate(function(dates) {
      beforeDatesLabel.setValue('Dates: ' + dates.join(', '));
    });
    datesAfter.evaluate(function(dates) {
      afterDatesLabel.setValue('Dates: ' + dates.join(', '));
    });

    // Create an empty image
    var empty = ee.Image().byte();

    // Display the t-scores layer with 60% transparency
    var tScoresLayer = tScores.updateMask(tScores.gt(0)).visualize({
      min: 0,
      max: t90,
      palette: [
        '0000FF', // Blue: low change
        '00FF00', // Green: medium change
        'FFFF00', // Yellow: high change
        'FFA500', // Orange: very high change
        'FF0000'  // Red: extreme change
      ],
      opacity: 0.6
    });
    Map.addLayer(tScoresLayer, {}, 'T-Scores');

    // Add the legend
    addLegend();

    // Evaluate the threshold
    evaluateThreshold(tScores, threshold, logBox);

    // Check if buildings should be ignored
    if (!ignoreBuildingsCheckbox.getValue()) {
      // Fetch the building footprints and points within AOI
      var datasetPath = countryIso === 'PSE' ? 'projects/ee-guillentorres/assets/PSE_polygons' : 'projects/sat-io/open-datasets/VIDA_COMBINED/' + countryIso;
      var buildings = ee.FeatureCollection(datasetPath).filterBounds(aoi);
      var points = ee.FeatureCollection('projects/ee-guillentorres/assets/points_ukraine_b').filterBounds(aoi);

      // Reduce regions for buildings and points with t-scores
      var buildingScores = tScores.reduceRegions({
        collection: buildings,
        reducer: ee.Reducer.mean(),
        scale: 10
      });

      // Filter buildings based on t-scores
      var highChangeBuildings = buildingScores.filter(ee.Filter.gt('mean', t90 * 0.9));
      var veryHighChangeBuildings = buildingScores.filter(ee.Filter.gt('mean', t90 * 0.95));
      var extremeChangeBuildings = buildingScores.filter(ee.Filter.gt('mean', t90));

      var combinedChangeBuildings = highChangeBuildings.merge(veryHighChangeBuildings).merge(extremeChangeBuildings);

      combinedChangeBuildings.size().evaluate(function(size) {
        logBox.add(ui.Label('Combined Change Buildings Count: ' + size));
      });

      // Dissolve the geometry for containment checks
      var combinedChangeBuildingsGeom = combinedChangeBuildings.geometry().dissolve();

      combinedChangeBuildingsGeom.evaluate(function(geom) {
        logBox.add(ui.Label('Combined Change Buildings Geometry: ' + JSON.stringify(geom)));

        var highChangePoints = points.filter(ee.Filter.contains({
          leftField: '.geo',
          rightValue: combinedChangeBuildingsGeom,
          maxError: 1
        }));

        highChangePoints.size().evaluate(function(size) {
          logBox.add(ui.Label('High Change Points Count: ' + size));
        });

        highChangePoints.size().evaluate(function(count) {
          if (count === 0) {
            var noPointsLabel = ui.Label('No OSM points found in high, very high, or extreme change areas', {color: 'red'});
            logBox.add(noPointsLabel);
          } else {
            highChangePoints.aggregate_array('fclass').evaluate(function(fclassesList) {
              var fclassCounts = {};
              fclassesList.forEach(function(fclass) {
                fclassCounts[fclass] = (fclassCounts[fclass] || 0) + 1;
              });

              var fclasses = Object.keys(fclassCounts);

              // Generate colors for each fclass
              var colorMap = generateColorMap(fclasses);

              // Display high change points with different colors based on fclass
              fclasses.forEach(function(fclass) {
                var filteredPoints = highChangePoints.filter(ee.Filter.eq('fclass', fclass));
                Map.addLayer(filteredPoints, {color: colorMap[fclass]}, fclass);
              });

              // Display the class of each high change point in the panel
              fclasses.forEach(function(fclass) {
                var pointInfo = ui.Label('Type: ' + fclass + ' | Count: ' + fclassCounts[fclass], {
                  color: colorMap[fclass]
                });
                logBox.add(pointInfo);
              });
            });
          }
        });

        // Paint the building footprints onto the empty image
        var allBuildings = empty.paint({
          featureCollection: buildingScores,
          color: 'mean',
          width: 1
        });

        var highChangeBuildingOutlines = empty.paint({
          featureCollection: combinedChangeBuildings,
          color: 1,
          width: 1
        });

        var buildingPalette = [
          '0000FF', // Blue: low change
          '00FF00', // Green: medium change
          'FFFF00', // Yellow: high change
          'FFA500', // Orange: very high change
          'FF0000'  // Red: extreme change
        ];

        // Display all buildings with t-scores using the color palette
        Map.addLayer(allBuildings, {palette: buildingPalette, min: 0, max: t90}, 'All Buildings');
        Map.addLayer(highChangeBuildingOutlines, {palette: ['FF0000'], min: 0, max: 1}, 'High Change Buildings');
      });
    }
  });
}

// Function to run the single image analysis
function runSingleImageAnalysis(beforeDate, afterDate) {
  var aoi = userAOI;

  // Get the closest image to the start date
  var beforeImage = getClosestImage(sentinel1Collection, beforeDate, aoi);

  // Get the closest image to the end date
  var afterImage = getClosestImage(sentinel1Collection, afterDate, aoi);

  // Get the mean and standard deviation images for the period before the start date
  var meanAndStdDevBefore = getMeanAndStdDevImages(sentinel1Collection, beforeDate, 3, aoi);
  var meanImageBefore = meanAndStdDevBefore.mean;
  var stdDevImageBefore = meanAndStdDevBefore.stdDev;
  var countBefore = meanAndStdDevBefore.count;
  var datesBefore = meanAndStdDevBefore.dates;

  // Calculate the t-scores using the single images and the baseline statistics
  var tScores = calculateTScores(meanImageBefore, stdDevImageBefore, afterImage, detectionType, threshold);

  // Calculate the mean, max, min, and percentiles of the t-scores
  var stats = tScores.reduceRegion({
    reducer: ee.Reducer.mean().combine({
      reducer2: ee.Reducer.minMax(),
      sharedInputs: true
    }),
    geometry: aoi,
    scale: 10,
    maxPixels: 1e9
  });

  var percentiles = tScores.reduceRegion({
    reducer: ee.Reducer.percentile([90]),
    geometry: aoi,
    scale: 10,
    maxPixels: 1e9
  });

  stats.evaluate(function(result) {
    meanLabel.setValue('Mean of the t-scores: ' + result.VV_mean);
    maxLabel.setValue('Max t-score: ' + result.VV_max);
    minLabel.setValue('Min t-score: ' + result.VV_min);
  });

  percentiles.evaluate(function(result) {
    var t90 = result.VV_p90;

    // Display the number of images and their dates
    beforeImagesLabel.setValue('Images used for before period: ' + countBefore.getInfo());
    datesBefore.evaluate(function(dates) {
      beforeDatesLabel.setValue('Dates: ' + dates.join(', '));
    });
    
    // Display the image used for after period
    afterImagesLabel.setValue('Images used for after period: 1');
    afterDatesLabel.setValue('Dates: ' + afterDate);

    // Create an empty image
    var empty = ee.Image().byte();

    // Display the t-scores layer with 60% transparency
    var tScoresLayer = tScores.updateMask(tScores.gt(0)).visualize({
      min: 0,
      max: t90,
      palette: [
        '0000FF', // Blue: low change
        '00FF00', // Green: medium change
        'FFFF00', // Yellow: high change
        'FFA500', // Orange: very high change
        'FF0000'  // Red: extreme change
      ],
      opacity: 0.6
    });
    Map.addLayer(tScoresLayer, {}, 'T-Scores');

    // Add the legend
    addLegend();

    // Evaluate the threshold
    evaluateThreshold(tScores, threshold, logBox);

    // Check if buildings should be ignored
    if (!ignoreBuildingsCheckbox.getValue()) {
      // Fetch building footprints and clip to the AOI
      var datasetPath = countryIso === 'PSE' ? 'projects/ee-guillentorres/assets/PSE_polygons' : 'projects/sat-io/open-datasets/VIDA_COMBINED/' + countryIso;
      var buildings = ee.FeatureCollection(datasetPath).filterBounds(aoi);

      // Calculate the mean t-score within each building footprint
      var buildingScores = tScores.reduceRegions({
        collection: buildings,
        reducer: ee.Reducer.mean(),
        scale: 10
      });

      // Filter buildings with high change, very high change, or extreme change
      var highChangeBuildings = buildingScores.filter(ee.Filter.gt('mean', t90 * 0.9));
      var veryHighChangeBuildings = buildingScores.filter(ee.Filter.gt('mean', t90 * 0.95));
      var extremeChangeBuildings = buildingScores.filter(ee.Filter.gt('mean', t90));

      // Combine the high change buildings into one collection
      var combinedChangeBuildings = highChangeBuildings.merge(veryHighChangeBuildings).merge(extremeChangeBuildings);

      combinedChangeBuildings.size().evaluate(function(size) {
        logBox.add(ui.Label('Combined Change Buildings Count: ' + size));
      });

      // Dissolve the geometry for containment checks
      var combinedChangeBuildingsGeom = combinedChangeBuildings.geometry().dissolve();

      combinedChangeBuildingsGeom.evaluate(function(geom) {
        logBox.add(ui.Label('Combined Change Buildings Geometry: ' + JSON.stringify(geom)));

        var highChangePoints = ee.FeatureCollection('projects/ee-guillentorres/assets/points_ukraine_b')
          .filterBounds(aoi)
          .filter(ee.Filter.contains({
            leftField: '.geo',
            rightValue: combinedChangeBuildingsGeom,
            maxError: 1
          }));

        highChangePoints.size().evaluate(function(size) {
          logBox.add(ui.Label('High Change Points Count: ' + size));
        });

        highChangePoints.size().evaluate(function(count) {
          if (count === 0) {
            var noPointsLabel = ui.Label('No OSM points found in high, very high, or extreme change areas', {color: 'red'});
            logBox.add(noPointsLabel);
          } else {
            highChangePoints.aggregate_array('fclass').evaluate(function(fclassesList) {
              var fclassCounts = {};
              fclassesList.forEach(function(fclass) {
                fclassCounts[fclass] = (fclassCounts[fclass] || 0) + 1;
              });

              var fclasses = Object.keys(fclassCounts);

              // Generate colors for each fclass
              var colorMap = generateColorMap(fclasses);

              // Display high change points with different colors based on fclass
              fclasses.forEach(function(fclass) {
                var filteredPoints = highChangePoints.filter(ee.Filter.eq('fclass', fclass));
                Map.addLayer(filteredPoints, {color: colorMap[fclass]}, fclass);
              });

              // Display the class of each high change point in the panel
              fclasses.forEach(function(fclass) {
                var pointInfo = ui.Label('Class: ' + fclass + ' | Count: ' + fclassCounts[fclass], {
                  color: colorMap[fclass]
                });
                logBox.add(pointInfo);
              });
            });
          }
        });

        // Paint the building footprints onto the empty image
        var allBuildings = empty.paint({
          featureCollection: buildingScores,
          color: 'mean',
          width: 1
        });

        // Paint the high change building footprints onto the empty image
        var highChangeBuildingOutlines = empty.paint({
          featureCollection: combinedChangeBuildings,
          color: 1,
          width: 1
        });

        // Define a color palette based on t-scores
        var buildingPalette = [
          '0000FF', // Blue: low change
          '00FF00', // Green: medium change
          'FFFF00', // Yellow: high change
          'FFA500', // Orange: very high change
          'FF0000'  // Red: extreme change
        ];

        // Display all buildings with t-scores using the color palette
        Map.addLayer(allBuildings, {palette: buildingPalette, min: 0, max: t90}, 'All Buildings');
        Map.addLayer(highChangeBuildingOutlines, {palette: ['FF0000'], min: 0, max: 1}, 'High Change Buildings');
      });
    }
  });
}

// Initialize drawing tools
var drawingTools = Map.drawingTools();
drawingTools.setShown(true);
drawingTools.setDrawModes(['rectangle']);
var userAOI;

// Function to handle AOI drawing completion
function onDrawingComplete() {
  // Get the drawn geometry
  userAOI = drawingTools.layers().get(0).getEeObject();

  // Enable the analyze button
  analyzeButton.setDisabled(false);

  // Enable the date selectors
  startYearSelect.setDisabled(false);
  startMonthSelect.setDisabled(false);
  startDaySelect.setDisabled(false);
  endYearSelect.setDisabled(false);
  endMonthSelect.setDisabled(false);
  endDaySelect.setDisabled(false);
}

// Add an event listener to detect when drawing is complete
drawingTools.onDraw(ui.util.debounce(onDrawingComplete, 500));

// Set Google Maps satellite layer as the base map initially
setGoogleMapsBaseLayer();

// Function to generate a random color map with valid 6-character hexadecimal strings
function generateColorMap(classes) {
  var colorMap = {};
  classes.forEach(function(c) {
    var color = Math.floor(Math.random() * 16777215).toString(16);
    while (color.length < 6) {
      color = '0' + color; // Ensure the color string is 6 characters long
    }
    colorMap[c] = '#' + color;
  });
  return colorMap;
}

// Define the user interface
var panel = ui.Panel({
  style: {width: '300px'}
});
ui.root.insert(0, panel);

// Title of the app
var title = ui.Label({
  value: 'SAR Change Detection Tool',
  style: {fontWeight: 'bold', fontSize: '20px'}
});
panel.add(title);

// Instruction to draw AOI
var instructions = ui.Label('Draw your area of interest on the map.');
panel.add(instructions);

// Explanation section
var explanation = ui.Label({
  value: 'This tool uses Sentinel-1 SAR data to detect changes in rader backscatter signal within a specified area of interest. You can draw an area, select the dates, and specify the type of change you are interested in detecting. The results are only indicative and should be interpreted as visual leads to groundtruth, not facts.The "construction" detection is not particularly robust, though.',
  style: {whiteSpace: 'pre-wrap', shown: true}
});
panel.add(explanation);

var toggleExplanationButton = ui.Button({
  label: 'Toggle Explanation',
  onClick: function() {
    explanation.style().set('shown', !explanation.style().get('shown'));
  }
});
panel.add(toggleExplanationButton);

// Add a text box for ISO code input
var isoLabel = ui.Label({
  value: 'Enter three-letter ISO code:',
  style: {color: 'blue', textDecoration: 'underline'},
  targetUrl: 'https://www.iban.com/country-codes'
});
var isoInput = ui.Textbox({
  placeholder: 'ISO code (e.g., LBN)',
  onChange: function(value) {
    countryIso = value;
  }
});
panel.add(isoLabel);
panel.add(isoInput);

var countryIso; // Variable to store ISO code

// Add a dropdown menu for detection type
var detectionTypeLabel = ui.Label('Select Detection Type:');
var detectionTypeSelect = ui.Select({
  items: ['change detection', 'construction'],
  placeholder: 'Select detection type',
  onChange: function(value) {
    detectionType = value;
  }
});
panel.add(detectionTypeLabel);
panel.add(detectionTypeSelect);

var detectionType; // Variable to store detection type

// Add a checkbox for ignoring buildings
var ignoreBuildingsCheckbox = ui.Checkbox({
  label: 'Ignore Buildings',
  value: false
});
panel.add(ignoreBuildingsCheckbox);

// Add a checkbox for single image comparison
var singleImageCheckbox = ui.Checkbox({
  label: 'Compare only one after image with multiple before (may help to detect recent or sudden changes)',
  value: false
});
panel.add(singleImageCheckbox);

// Add a slider for threshold selection
var thresholdLabel = ui.Label('Select Threshold:');
var thresholdSlider = ui.Slider({
  min: 0,
  max: 5,
  value: 2,
  step: 0.1,
  onChange: function(value) {
    threshold = value;
  }
});
panel.add(thresholdLabel);
panel.add(thresholdSlider);

var threshold = 2; // Default threshold
// Labels and dropdowns for selecting start and end dates
var startDateLabel = ui.Label('Start Date');
var startYearSelect = ui.Select({
  placeholder: 'Select start year',
  items: ee.List.sequence(2015, 2024).getInfo().map(function(year) {
    return {label: year.toString(), value: year.toString()};
  }),
  disabled: true
});
var startMonthSelect = ui.Select({
  placeholder: 'Select start month',
  items: ee.List.sequence(1, 12).getInfo().map(function(month) {
    return {label: month.toString(), value: month.toString()};
  }),
  onChange: updateStartDays,
  disabled: true
});
var startDaySelect = ui.Select({
  placeholder: 'Select start day',
  disabled: true
});
var startRow = ui.Panel({
  widgets: [startYearSelect, startMonthSelect],
  layout: ui.Panel.Layout.Flow('horizontal')
});

var endDateLabel = ui.Label('End Date');
var endYearSelect = ui.Select({
  placeholder: 'Select end year',
  items: ee.List.sequence(2015, 2024).getInfo().map(function(year) {
    return {label: year.toString(), value: year.toString()};
  }),
  disabled: true
});
var endMonthSelect = ui.Select({
  placeholder: 'Select end month',
  items: ee.List.sequence(1, 12).getInfo().map(function(month) {
    return {label: month.toString(), value: month.toString()};
  }),
  onChange: updateEndDays,
  disabled: true
});
var endDaySelect = ui.Select({
  placeholder: 'Select end day',
  disabled: true
});
var endRow = ui.Panel({
  widgets: [endYearSelect, endMonthSelect],
  layout: ui.Panel.Layout.Flow('horizontal')
});

// Add inputs to the panel
panel.add(startDateLabel);
panel.add(startRow);
panel.add(startDaySelect);
panel.add(endDateLabel);
panel.add(endRow);
panel.add(endDaySelect);

// Button to run the analysis (initially disabled)
var analyzeButton = ui.Button({
  label: 'Analyze',
  onClick: function() {
    var beforeYear = startYearSelect.getValue();
    var beforeMonth = startMonthSelect.getValue();
    var beforeDay = startDaySelect.getValue();
    var beforeDate = beforeYear + '-' + beforeMonth + '-' + beforeDay;

    var afterYear = endYearSelect.getValue();
    var afterMonth = endMonthSelect.getValue();
    var afterDay = endDaySelect.getValue();
    var afterDate = afterYear + '-' + afterMonth + '-' + afterDay;

    // Clear the AOI rectangle
    drawingTools.layers().reset();
    drawingTools.setDrawModes(['rectangle']);

    if (singleImageCheckbox.getValue()) {
      runSingleImageAnalysis(beforeDate, afterDate);
    } else {
      runAnalysis(beforeDate, afterDate);
    }
  },
  disabled: true
});
panel.add(analyzeButton);

// Add a box for logging and informing the user
var logBox = ui.Panel({
  style: {backgroundColor: '#f0f0f0', padding: '8px'}
});
panel.add(logBox);

var meanLabel = ui.Label('Mean of the t-scores: ');
var maxLabel = ui.Label('Max t-score: ');
var minLabel = ui.Label('Min t-score: ');
logBox.add(meanLabel);
logBox.add(maxLabel);
logBox.add(minLabel);

var beforeImagesLabel = ui.Label('Images used for before period: ');
var beforeDatesLabel = ui.Label('');
var afterImagesLabel = ui.Label('Images used for after period: ');
var afterDatesLabel = ui.Label('');
logBox.add(beforeImagesLabel);
logBox.add(beforeDatesLabel);
logBox.add(afterImagesLabel);
logBox.add(afterDatesLabel);

// Google Maps link button
var googleMapsButton = ui.Button({
  label: 'Get Google Maps Link',
  onClick: function() {
    var center = Map.getCenter();
    center.evaluate(function(coords) {
      var zoom = Map.getZoom();
      var url = 'https://www.google.com/maps/@' + coords.coordinates[1] + ',' + coords.coordinates[0] + ',' + zoom + 'z';
      var googleMapsLink = ui.Label({
        value: 'Open in Google Maps',
        style: {color: 'blue', textDecoration: 'underline'},
        targetUrl: url
      });
      logBox.add(googleMapsLink);
    });
  }
});
panel.add(googleMapsButton);

// Reset button to reset the app to its initial state
var resetButton = ui.Button({
  label: 'Reset',
  onClick: function() {
    resetApp();
  }
});
panel.add(resetButton);

// Function to reset the app to its initial state
function resetApp() {
  // Clear all user inputs
  isoInput.setValue('');
  detectionTypeSelect.setValue(null);
  thresholdSlider.setValue(2);
  startYearSelect.setValue(null);
  startMonthSelect.setValue(null);
  startDaySelect.setValue(null);
  endYearSelect.setValue(null);
  endMonthSelect.setValue(null);
  endDaySelect.setValue(null);
  ignoreBuildingsCheckbox.setValue(false);
  singleImageCheckbox.setValue(false);
  
  // Clear the labels
  meanLabel.setValue('Mean of the t-scores: ');
  maxLabel.setValue('Max t-score: ');
  minLabel.setValue('Min t-score: ');
  beforeImagesLabel.setValue('Images used for before period: ');
  beforeDatesLabel.setValue('');
  afterImagesLabel.setValue('Images used for after period: ');
  afterDatesLabel.setValue('');
  
  // Clear the log box
  logBox.clear();

  // Clear map layers and reset drawing tools
  Map.clear();
  drawingTools.setShown(true);
  drawingTools.setDrawModes(['rectangle']);
  drawingTools.layers().reset();

  // Disable analyze button
  analyzeButton.setDisabled(true);
  
  // Disable date selectors
  startYearSelect.setDisabled(true);
  startMonthSelect.setDisabled(true);
  startDaySelect.setDisabled(true);
  endYearSelect.setDisabled(true);
  endMonthSelect.setDisabled(true);
  endDaySelect.setDisabled(true);

  // Set Google Maps satellite layer as the base map initially
  setGoogleMapsBaseLayer();

  // Re-initialize the log box
  panel.remove(logBox);
  logBox = ui.Panel({
    style: {backgroundColor: '#f0f0f0', padding: '8px'}
  });
  panel.add(logBox);
  logBox.add(meanLabel);
  logBox.add(maxLabel);
  logBox.add(minLabel);
  logBox.add(beforeImagesLabel);
  logBox.add(beforeDatesLabel);
  logBox.add(afterImagesLabel);
  logBox.add(afterDatesLabel);
}

// Function to fetch available days for the selected start month and year
function updateStartDays() {
  var year = parseInt(startYearSelect.getValue(), 10);
  var month = parseInt(startMonthSelect.getValue(), 10);
  var aoi = userAOI;

  if (year && month && aoi) {
    var startDate = ee.Date.fromYMD(year, month, 1);
    var endDate = startDate.advance(1, 'month');
    var sentinel1 = ee.ImageCollection('COPERNICUS/S1_GRD')
      .filterBounds(aoi)
      .filterDate(startDate, endDate)
      .filter(ee.Filter.eq('instrumentMode', 'IW'))
      .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
      .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'));
      
    sentinel1.aggregate_array('system:time_start').evaluate(function(dates) {
      var days = dates.map(function(date) {
        return ee.Date(date).getRelative('day', 'month').getInfo() + 1;
      });
      startDaySelect.items().reset(days.map(function(day) {
        return {label: day.toString(), value: day.toString()};
      }));
      console.log('Available days for start date:', days);
    });
  }
}

// Function to fetch available days for the selected end month and year
function updateEndDays() {
  var year = parseInt(endYearSelect.getValue(), 10);
  var month = parseInt(endMonthSelect.getValue(), 10);
  var aoi = userAOI;

  if (year && month && aoi) {
    var startDate = ee.Date.fromYMD(year, month, 1);
    var endDate = startDate.advance(1, 'month');
    var sentinel1 = ee.ImageCollection('COPERNICUS/S1_GRD')
      .filterBounds(aoi)
      .filterDate(startDate, endDate)
      .filter(ee.Filter.eq('instrumentMode', 'IW'))
      .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
      .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'));
      
    sentinel1.aggregate_array('system:time_start').evaluate(function(dates) {
      var days = dates.map(function(date) {
        return ee.Date(date).getRelative('day', 'month').getInfo() + 1;
      });
      endDaySelect.items().reset(days.map(function(day) {
        return {label: day.toString(), value: day.toString()};
      }));
      console.log('Available days for end date:', days);
    });
  }
}
